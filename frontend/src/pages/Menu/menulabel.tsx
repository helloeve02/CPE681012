import React from "react";

/**
 * Enhanced UI ‡∏™‡∏£‡∏∏‡∏õ‡∏â‡∏•‡∏≤‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ 3 ‡πÅ‡∏ö‡∏ö - ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡∏™‡∏°‡∏î‡∏∏‡∏• ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢
 * - ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
 * - ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ (8 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)  
 * - ‡πÅ‡∏ö‡∏ö‡∏´‡∏ß‡∏≤‡∏ô-‡∏°‡∏±‡∏ô-‡πÄ‡∏Ñ‡πá‡∏° ‡∏´‡∏£‡∏∑‡∏≠ GDA (Front-of-Pack)
 *
 * ‡πÉ‡∏ä‡πâ TailwindCSS ‡∏û‡∏£‡πâ‡∏≠‡∏° animations ‡πÅ‡∏•‡∏∞ modern design
 */

// ---------- Types ----------
export type Nutrient = {
  key: string;
  label: string;
  amount?: string;
  percent?: string;
};

export type FullLabelData = {
  productName: string;
  brand?: string;
  servingPerPack?: string;
  servingSize?: string;
  energyPerServing?: string;
  energyFromFat?: string;
  nutrients: Nutrient[];
  footnote?: string;
};

export type ShortLabelData = {
  productName: string;
  servingPerPack?: string;
  servingSize?: string;
  energyPerServing?: string;
  nutrients: Nutrient[];
  footnote?: string;
};

export type GDAData = {
  perUnitLabel?: string;
  shareHint?: string;
  energy?: { value: string; percent?: string };
  sugar?: { value: string; percent?: string };
  fat?: { value: string; percent?: string };
  sodium?: { value: string; percent?: string };
};

// ---------- Enhanced UI Components ----------
const SectionTitle: React.FC<{ title: string; subtitle?: string; icon?: string }> = ({ title, subtitle, icon }) => (
  <div className="flex items-center gap-4 mb-8">
    {icon && (
      <div className="flex-shrink-0 w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
        <span className="text-white text-xl">{icon}</span>
      </div>
    )}
    <div className="flex-1">
      <h3 className="text-2xl sm:text-3xl font-bold text-gray-900 tracking-tight leading-tight">
        {title}
      </h3>
      {subtitle && (
        <p className="text-gray-600 mt-1 font-medium text-sm sm:text-base">{subtitle}</p>
      )}
    </div>
  </div>
);

const Card: React.FC<{ 
  className?: string; 
  children: React.ReactNode; 
  variant?: 'default' | 'gradient' | 'glass';
  hover?: boolean;
}> = ({ 
  className = "", 
  children, 
  variant = 'default',
  hover = true 
}) => {
  const baseClasses = "rounded-3xl border shadow-xl transition-all duration-500 ease-out p-8";
  
  const variantClasses = {
    default: 'bg-white border-gray-100',
    gradient: 'bg-gradient-to-br from-white via-blue-50/20 to-indigo-50/30 border-blue-100/50',
    glass: 'bg-white/70 backdrop-blur-xl border-white/20'
  };
  
  const hoverClasses = hover 
    ? 'hover:shadow-2xl hover:scale-[1.02] hover:-translate-y-1' 
    : '';

  return (
    <div className={`${baseClasses} ${variantClasses[variant]} ${hoverClasses} ${className}`}>
      {children}
    </div>
  );
};

const KeyValue: React.FC<{ 
  k: string; 
  v?: string; 
  highlight?: boolean;
  size?: 'sm' | 'md';
}> = ({ k, v, highlight = false, size = 'md' }) => {
  const sizeClasses = size === 'sm' 
    ? 'py-3 px-4 text-sm' 
    : 'py-4 px-5 text-base';

  return (
    <div className={`
      flex items-start justify-between gap-4 ${sizeClasses} rounded-2xl 
      transition-all duration-300 ease-out
      ${highlight 
        ? 'bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-100 shadow-sm' 
        : 'hover:bg-gray-50/70'
      }
    `}>
      <span className="text-gray-700 font-medium leading-relaxed">{k}</span>
      <span className={`font-bold text-right leading-relaxed ${
        highlight ? 'text-indigo-700' : 'text-gray-900'
      }`}>
        {v ?? "‚Äî"}
      </span>
    </div>
  );
};

const Divider: React.FC<{ variant?: 'default' | 'gradient' | 'dotted' }> = ({ variant = 'gradient' }) => {
  const variantClasses = {
    default: 'border-t border-gray-200',
    gradient: 'h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent',
    dotted: 'border-t-2 border-dotted border-gray-300'
  };

  return (
    <div className={`my-8 ${variantClasses[variant]}`} />
  );
};

// ---------- Enhanced Full Label ----------
const FullNutritionLabel: React.FC<{ data: FullLabelData }> = ({ data }) => {
  return (
    <Card variant="gradient">
      <SectionTitle 
        title="‡∏â‡∏•‡∏≤‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°" 
        subtitle="‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        icon="üìä"
      />
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="space-y-2">
          <KeyValue k="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå" v={data.productName} highlight />
          {data.brand && <KeyValue k="‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠" v={data.brand} />}
          <KeyValue k="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå" v={data.servingPerPack} />
        </div>
        <div className="space-y-2">
          <KeyValue k="‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ" v={data.servingSize} />
          <KeyValue k="‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ" v={data.energyPerServing} highlight />
          {data.energyFromFat && <KeyValue k="‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏Ç‡∏°‡∏±‡∏ô" v={data.energyFromFat} />}
        </div>
      </div>

      <Divider />

      <div className="space-y-4">
        <div className="grid grid-cols-12 gap-4 p-5 bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl border border-gray-200">
          <div className="col-span-6 text-base font-bold text-gray-800">‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>
          <div className="col-span-3 text-right text-base font-bold text-gray-800">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì</div>
          <div className="col-span-3 text-right text-base font-bold text-gray-800">%RDI*</div>
        </div>
        
        <div className="space-y-3">
          {data.nutrients.map((n, idx) => (
            <div 
              key={n.key} 
              className={`
                grid grid-cols-12 gap-4 py-5 px-5 rounded-2xl 
                transition-all duration-300 ease-out hover:shadow-md hover:-translate-y-0.5
                ${idx % 2 === 0 
                  ? 'bg-gradient-to-r from-blue-50/50 via-indigo-50/30 to-transparent hover:from-blue-50 hover:to-indigo-50/50' 
                  : 'bg-gradient-to-r from-purple-50/50 via-pink-50/30 to-transparent hover:from-purple-50 hover:to-pink-50/50'
                }
              `}
            >
              <div className="col-span-6 text-base font-semibold text-gray-800 leading-relaxed">{n.label}</div>
              <div className="col-span-3 text-right text-base font-bold text-gray-700">{n.amount ?? "‚Äî"}</div>
              <div className={`col-span-3 text-right text-base font-bold ${
                n.percent && n.percent !== '‚Äî' && n.percent !== '-' 
                  ? 'text-indigo-600' 
                  : 'text-gray-400'
              }`}>
                {n.percent ?? "‚Äî"}
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {data.footnote && (
        <div className="mt-8 p-6 bg-gradient-to-r from-amber-50 via-orange-50 to-yellow-50 rounded-2xl border border-amber-200 shadow-sm">
          <p className="text-sm text-amber-800 font-medium leading-relaxed">
            <span className="font-bold">*</span> {data.footnote}
          </p>
        </div>
      )}
    </Card>
  );
};

// ---------- Enhanced Short Label ----------
const ShortNutritionLabel: React.FC<{ data: ShortLabelData }> = ({ data }) => {
  return (
    <Card variant="glass" className="mb-8">
      <SectionTitle 
        title="‡∏â‡∏•‡∏≤‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠" 
        subtitle="‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å 8 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        icon="üìã"
      />
      
      <div className="space-y-3 mb-6">
        <KeyValue k="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå" v={data.productName} highlight size="sm" />
        <KeyValue k="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå" v={data.servingPerPack} size="sm" />
        <KeyValue k="‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ" v={data.servingSize} size="sm" />
        <KeyValue k="‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ" v={data.energyPerServing} highlight size="sm" />
      </div>

      <Divider />

      <div className="space-y-4">
        <div className="grid grid-cols-12 gap-3 p-4 bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl border border-emerald-200">
          <div className="col-span-6 text-sm font-bold text-gray-800">‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>
          <div className="col-span-3 text-right text-sm font-bold text-gray-800">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì</div>
          <div className="col-span-3 text-right text-sm font-bold text-gray-800">%RDI*</div>
        </div>
        
        <div className="space-y-2">
          {data.nutrients.map((n, idx) => (
            <div 
              key={n.key} 
              className={`
                grid grid-cols-12 gap-3 py-4 px-4 rounded-xl 
                transition-all duration-300 ease-out hover:shadow-sm hover:-translate-y-0.5
                ${idx % 2 === 0 
                  ? 'bg-gradient-to-r from-emerald-50/60 to-transparent hover:from-emerald-50' 
                  : 'bg-gradient-to-r from-green-50/60 to-transparent hover:from-green-50'
                }
              `}
            >
              <div className="col-span-6 text-sm font-semibold text-gray-800 leading-relaxed">{n.label}</div>
              <div className="col-span-3 text-right text-sm font-bold text-gray-700">{n.amount ?? "‚Äî"}</div>
              <div className={`col-span-3 text-right text-sm font-bold ${
                n.percent && n.percent !== '‚Äî' && n.percent !== '-' 
                  ? 'text-emerald-600' 
                  : 'text-gray-400'
              }`}>
                {n.percent ?? "‚Äî"}
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {data.footnote && (
        <div className="mt-6 p-4 bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl border border-emerald-200 shadow-sm">
          <p className="text-xs text-emerald-800 font-medium leading-relaxed">
            <span className="font-bold">*</span> {data.footnote}
          </p>
        </div>
      )}
    </Card>
  );
};

// ---------- Enhanced GDA Pills ----------
const GDAPill: React.FC<{ 
  title: string; 
  value: string; 
  percent?: string; 
  color: 'energy' | 'sugar' | 'fat' | 'sodium';
  index: number;
}> = ({ title, value, percent, color, index }) => {
  const colorClasses = {
    energy: 'from-orange-400 via-red-500 to-pink-500',
    sugar: 'from-pink-400 via-rose-500 to-red-500', 
    fat: 'from-amber-400 via-yellow-500 to-orange-500',
    sodium: 'from-blue-400 via-indigo-500 to-purple-500'
  };

  const shadowClasses = {
    energy: 'shadow-orange-200 hover:shadow-orange-300',
    sugar: 'shadow-pink-200 hover:shadow-pink-300',
    fat: 'shadow-yellow-200 hover:shadow-yellow-300',
    sodium: 'shadow-blue-200 hover:shadow-blue-300'
  };

  return (
    <div 
      className={`
        relative overflow-hidden rounded-3xl bg-gradient-to-br ${colorClasses[color]} 
        shadow-xl ${shadowClasses[color]} 
        transition-all duration-500 ease-out
        hover:scale-105 hover:-translate-y-2 hover:rotate-1
        p-8 text-white group cursor-pointer
        transform-gpu
      `}
      style={{ 
        animationDelay: `${index * 100}ms`,
        animation: 'fadeInUp 0.8s ease-out forwards'
      }}
    >
      <div className="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
      <div className="absolute top-4 right-4 w-8 h-8 bg-white/20 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300 transform group-hover:scale-110" />
      
      <div className="relative z-10">
        <div className="text-xs font-bold uppercase tracking-wider opacity-90 mb-3 leading-tight">
          {title}
        </div>
        <div className="text-3xl sm:text-4xl font-black leading-none mb-4 drop-shadow-sm">
          {value}
        </div>
        {percent && (
          <div className="text-sm font-semibold bg-white/25 backdrop-blur-sm px-3 py-2 rounded-full inline-block border border-white/30">
            {percent}
          </div>
        )}
      </div>
      
      <div className="absolute -bottom-4 -right-4 w-24 h-24 bg-white/10 rounded-full blur-xl" />
    </div>
  );
};

const GDACard: React.FC<{ data: GDAData }> = ({ data }) => (
  <Card>
    <SectionTitle 
      title="‡∏â‡∏•‡∏≤‡∏Å‡∏´‡∏ß‡∏≤‡∏ô ‡∏°‡∏±‡∏ô ‡πÄ‡∏Ñ‡πá‡∏°" 
      subtitle="Front-of-Pack Guideline Daily Amounts"
      icon="üö®"
    />
    
    <div className="mb-8 p-6 bg-gradient-to-r from-indigo-50 via-purple-50 to-pink-50 rounded-2xl border border-indigo-200 shadow-sm">
      <div className="font-bold text-indigo-900 mb-2 text-lg">
        ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ {data.perUnitLabel ?? "1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ"}
      </div>
      {data.shareHint && (
        <div className="text-sm text-indigo-700 font-semibold bg-white/60 px-3 py-1 rounded-full inline-block">
          {data.shareHint}
        </div>
      )}
    </div>
    
    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
      <GDAPill 
        title="‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô" 
        value={data.energy?.value ?? "‚Äî"} 
        percent={data.energy?.percent} 
        color="energy"
        index={0}
      />
      <GDAPill 
        title="‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•" 
        value={data.sugar?.value ?? "‚Äî"} 
        percent={data.sugar?.percent} 
        color="sugar"
        index={1}
      />
      <GDAPill 
        title="‡πÑ‡∏Ç‡∏°‡∏±‡∏ô" 
        value={data.fat?.value ?? "‚Äî"} 
        percent={data.fat?.percent} 
        color="fat"
        index={2}
      />
      <GDAPill 
        title="‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°" 
        value={data.sodium?.value ?? "‚Äî"} 
        percent={data.sodium?.percent} 
        color="sodium"
        index={3}
      />
    </div>
  </Card>
);

// ---------- Demo data ----------
const demoFull: FullLabelData = {
  productName: "‡∏ö‡∏¥‡∏™‡∏Å‡∏¥‡∏ï‡∏£‡∏™‡∏ô‡∏°",
  brand: "‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
  servingPerPack: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ",
  servingSize: "1 ‡∏ã‡∏≠‡∏á (30 ‡∏Å‡∏£‡∏±‡∏°)",
  energyPerServing: "150 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ",
  energyFromFat: "60 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ",
  footnote: "‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (Thai RDI) ‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô 2,000 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô",
  nutrients: [
    { key: "fat", label: "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", amount: "8 ‡∏Å‡∏£‡∏±‡∏°", percent: "12%" },
    { key: "satfat", label: "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß", amount: "3 ‡∏Å‡∏£‡∏±‡∏°", percent: "15%" },
    { key: "trans", label: "‡∏Å‡∏£‡∏î‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏ô‡∏™‡πå", amount: "0 ‡∏Å‡∏£‡∏±‡∏°", percent: "‚Äî" },
    { key: "chol", label: "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•", amount: "5 ‡∏°‡∏Å.", percent: "2%" },
    { key: "protein", label: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô", amount: "2 ‡∏Å‡∏£‡∏±‡∏°", percent: "4%" },
    { key: "carb", label: "‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", amount: "19 ‡∏Å‡∏£‡∏±‡∏°", percent: "6%" },
    { key: "sugar", label: "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", amount: "10 ‡∏Å‡∏£‡∏±‡∏°", percent: "16%" },
    { key: "fiber", label: "‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£", amount: "1 ‡∏Å‡∏£‡∏±‡∏°", percent: "4%" },
    { key: "sodium", label: "‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°", amount: "170 ‡∏°‡∏Å.", percent: "9%" },
    { key: "calcium", label: "‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°", amount: "40 ‡∏°‡∏Å.", percent: "5%" },
    { key: "iron", label: "‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏´‡∏•‡πá‡∏Å", amount: "0.7 ‡∏°‡∏Å.", percent: "5%" },
    { key: "vitA", label: "‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡πÄ‡∏≠", amount: "‚Äî", percent: "‚Äî" },
    { key: "vitB1", label: "‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ö‡∏µ1", amount: "‚Äî", percent: "‚Äî" },
    { key: "vitB2", label: "‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ö‡∏µ2", amount: "‚Äî", percent: "‚Äî" },
    { key: "vitC", label: "‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ", amount: "‚Äî", percent: "‚Äî" },
  ],
};

const demoShort: ShortLabelData = {
  productName: "‡∏ö‡∏¥‡∏™‡∏Å‡∏¥‡∏ï‡∏£‡∏™‡∏ô‡∏°",
  servingPerPack: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ",
  servingSize: "1 ‡∏ã‡∏≠‡∏á (30 ‡∏Å‡∏£‡∏±‡∏°)",
  energyPerServing: "150 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ",
  footnote: "‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (Thai RDI) 2,000 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ",
  nutrients: [
    { key: "fat", label: "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", amount: "8 ‡∏Å‡∏£‡∏±‡∏°", percent: "12%" },
    { key: "satfat", label: "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß", amount: "3 ‡∏Å‡∏£‡∏±‡∏°", percent: "15%" },
    { key: "chol", label: "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•", amount: "5 ‡∏°‡∏Å.", percent: "2%" },
    { key: "protein", label: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô", amount: "2 ‡∏Å‡∏£‡∏±‡∏°", percent: "4%" },
    { key: "carb", label: "‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", amount: "19 ‡∏Å‡∏£‡∏±‡∏°", percent: "6%" },
    { key: "sugar", label: "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", amount: "10 ‡∏Å‡∏£‡∏±‡∏°", percent: "16%" },
    { key: "fiber", label: "‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£", amount: "1 ‡∏Å‡∏£‡∏±‡∏°", percent: "4%" },
    { key: "sodium", label: "‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°", amount: "170 ‡∏°‡∏Å.", percent: "9%" },
  ],
};

const demoGDA: GDAData = {
  perUnitLabel: "1 ‡∏ã‡∏≠‡∏á",
  shareHint: "‡∏Ñ‡∏ß‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
  energy: { value: "340 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ", percent: "‚âà17%" },
  sugar: { value: "10 ‡∏Å‡∏£‡∏±‡∏°", percent: "‚âà19%" },
  fat: { value: "18 ‡∏Å‡∏£‡∏±‡∏°", percent: "‚âà28%" },
  sodium: { value: "170 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏°", percent: "‚âà7%" },
};

// ---------- Enhanced Main Page ----------
export default function NutritionLabelUI() {
  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-slate-50 via-blue-50/40 to-indigo-50/60 relative overflow-hidden font-kanit">
      {/* Enhanced floating background elements */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-48 -right-48 w-96 h-96 bg-gradient-to-br from-blue-400/15 via-indigo-400/10 to-purple-400/15 rounded-full blur-3xl animate-pulse" />
        <div className="absolute -bottom-48 -left-48 w-96 h-96 bg-gradient-to-br from-pink-400/15 via-orange-400/10 to-yellow-400/15 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }} />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-72 h-72 bg-gradient-to-br from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '4s' }} />
      </div>

      <div className="relative z-10 p-6 sm:p-8 lg:p-12">
        <header className="mx-auto max-w-8xl mb-12 text-center">
          <div className="inline-flex items-center justify-center p-4 bg-gradient-to-br from-indigo-600 via-purple-600 to-pink-600 rounded-full mb-8 shadow-2xl transform hover:scale-105 transition-all duration-300">
            <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center shadow-inner">
              <span className="text-3xl animate-bounce">üè∑Ô∏è</span>
            </div>
          </div>
          
          <h1 className="text-5xl sm:text-6xl lg:text-7xl font-black tracking-tight mb-6 leading-tight">
            <span className="bg-gradient-to-r from-gray-900 via-indigo-800 to-purple-800 bg-clip-text text-transparent">
              ‡∏â‡∏•‡∏≤‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
            </span>
          </h1>
          
          <p className="text-xl sm:text-2xl text-gray-600 max-w-4xl mx-auto font-medium leading-relaxed mb-8">
            ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏•‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° / ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ / ‡∏´‡∏ß‡∏≤‡∏ô-‡∏°‡∏±‡∏ô-‡πÄ‡∏Ñ‡πá‡∏° (GDA) 
            
          </p>
          
          <div className="flex justify-center mb-8">
            <div className="h-2 w-48 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 rounded-full shadow-lg animate-pulse" />
          </div>
        </header>

        <main className="mx-auto max-w-8xl">
          <div className="grid grid-cols-1 xl:grid-cols-5 gap-8 lg:gap-12">
            <div className="xl:col-span-3">
              <FullNutritionLabel data={demoFull} />
            </div>
            <div className="xl:col-span-2 space-y-8">
              <ShortNutritionLabel data={demoShort} />
              <GDACard data={demoGDA} />
            </div>
          </div>
        </main>

        <footer className="mx-auto max-w-8xl mt-16">
          <Card variant="glass" hover={false} className="text-center">
            <div className="mt-8 flex justify-center space-x-3">
              <div className="w-3 h-3 bg-indigo-500 rounded-full animate-bounce" />
              <div className="w-3 h-3 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
              <div className="w-3 h-3 bg-pink-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
              <div className="w-3 h-3 bg-orange-500 rounded-full animate-bounce" style={{ animationDelay: '0.3s' }} />
            </div>
          </Card>
        </footer>
      </div>

     
    </div>
  );
}